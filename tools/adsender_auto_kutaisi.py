# tools/adsender_auto_kutaisi.py
# –ë–æ—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Froggle (–ö—É—Ç–∞–∏—Å–∏, –ê–≤—Ç–æ, –¢—é–Ω–∏–Ω–≥)
import asyncio
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from loguru import logger
from config import BOT_TOKEN_AD
from database import get_db, get_all_category_tags
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/adsender_auto_kutaisi.log", rotation="10MB", compression="zip", level="DEBUG")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN_AD, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

# URL API Froggle (–ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
FROGGLE_API_URL = "http://localhost:8000/api/notify_admins"
API_KEY = "secret_key"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
CITY = "–ö—É—Ç–∞–∏—Å–∏"
CATEGORY = "auto"
TAG = "—Ç—é–Ω–∏–Ω–≥"  # –û–¥–∏–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–≥
DESCRIPTIONS = [
    "–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AdSenderBot!",
    "–°—Ä–æ—á–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!",
    "–°—É–ø–µ—Ä –∞–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–π—á–∞—Å!",
    "–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!",
    "–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å! –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
    "–ù–æ–≤–∏–Ω–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
    "üî• –ì–æ—Ä—è—á–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —É—Å–ø–µ–π –ø–µ—Ä–≤—ã–º!",
    "–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –∑–¥–µ—Å—å!",
    "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!",
    "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∞–∫—Ü–∏—è!",
    "–°–∫–∏–¥–∫–∏ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è, –∑–∞—Ö–æ–¥–∏!",
    "–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ!",
    "–ü—Ä–æ–±–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ü–µ–Ω–∏ —Å–∞–º!",
    "–£—Å–ø–µ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–≥–æ–¥–æ–π —Å–µ–π—á–∞—Å!"
]
PRICES = ["100$", "250$", "500$", None]
MEDIA_FOLDER = "C:/Users/user/PycharmProjects/Froggle/test_media"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç telegram_id={message.from_user.id}")
    await message.answer("–≠—Ç–æ AdSenderAutoKutaisi. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_ad –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Froggle (–ö—É—Ç–∞–∏—Å–∏, –ê–≤—Ç–æ, –¢—é–Ω–∏–Ω–≥).")

# –ö–æ–º–∞–Ω–¥–∞ /send_ad
@dp.message(Command("send_ad"))
async def send_ad_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /send_ad –æ—Ç telegram_id={message.from_user.id}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    title_ru = f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{random.randint(1000, 9999)}"
    description_ru = random.choice(DESCRIPTIONS)
    price = random.choice(PRICES)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "auto"
    async for session in get_db():
        tags_list = await get_all_category_tags(CATEGORY)
        if not tags_list:
            await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORY}' –≤ –±–∞–∑–µ.")
            logger.error(f"–ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{CATEGORY}'")
            return
        available_tags = [tag[1] for tag in tags_list if tag[1] != "—Ç—é–Ω–∏–Ω–≥"]
        random_tag = random.choice(available_tags) if available_tags else "—Ä–µ–º–æ–Ω—Ç"
        logger.debug(f"–°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–≥ –≤—ã–±—Ä–∞–Ω: {random_tag}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
    tags = ["—Ç—é–Ω–∏–Ω–≥", random_tag]
    tags_json = json.dumps(tags)  # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON-—Å—Ç—Ä–æ–∫—É
    logger.debug(f"–ò—Ç–æ–≥–æ–≤—ã–µ —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {tags_json}")

    media_files = [f for f in os.listdir(MEDIA_FOLDER) if f.endswith(('.jpg', '.png', '.jpeg'))]
    if not media_files:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ test_media.")
        logger.error("–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ test_media")
        return
    random_media = random.choice(media_files)
    media_path = os.path.join(MEDIA_FOLDER, random_media)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API Froggle
    data = {
        "category": CATEGORY,
        "city": CITY,
        "tags": tags_json,  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON-—Å—Ç—Ä–æ–∫—É
        "title_ru": title_ru,
        "description_ru": description_ru,
        "price": price if price else "",
        "contact_info": "@TestSender",
        "status": "pending",
        "is_test": True,
        "api_key": API_KEY,
        "user_id": "7937566977"
    }
    logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è API: {data}")

    try:
        with open(media_path, "rb") as media_file:
            files = {"media": (random_media, media_file, "image/jpeg")}
            response = requests.post(
                FROGGLE_API_URL,
                data=data,
                files=files
            )
        if response.status_code == 200:
            ad_id = response.json().get("ad_id")
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –≤ Froggle")
            await message.answer(f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Froggle –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API Froggle: {response.status_code} - {response.text}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Froggle: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Froggle: {str(e)}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ AdSenderAutoKutaisi...")
    logger.debug("Polling started")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())