# tools/adsender.py
# –ë–æ—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Froggle —á–µ—Ä–µ–∑ API
import asyncio
import random
import os
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command  # –ò–º–ø–æ—Ä—Ç Command –¥–ª—è aiogram 3.x
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger
from config import BOT_TOKEN_AD, DATABASE_URL  # –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏ URL –±–∞–∑—ã –∏–∑ config.py
from database import get_db, get_all_category_tags  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/adsender.log", rotation="10MB", compression="zip", level="DEBUG")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN_AD, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

# URL API Froggle (–ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
FROGGLE_API_URL = "http://localhost:8000/api/notify_admins"
API_KEY = "secret_key"  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–æ–≤

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
CATEGORIES = ["services", "food", "housing", "communication", "auto", "market", "shopping"]
CITIES = ["–¢–±–∏–ª–∏—Å–∏", "–ë–∞—Ç—É–º–∏", "–ö—É—Ç–∞–∏—Å–∏"]
DESCRIPTIONS = [
    "–û—Ç–ª–∏—á–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç AdSenderBot!",
    "–°—Ä–æ—á–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!",
    "–°—É–ø–µ—Ä –∞–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–π—á–∞—Å!",
    "–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!",
    "–ù–µ —É–ø—É—Å—Ç–∏ —à–∞–Ω—Å! –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
    "–ù–æ–≤–∏–Ω–∫–∞! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
    "üî• –ì–æ—Ä—è—á–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —É—Å–ø–µ–π –ø–µ—Ä–≤—ã–º!",
    "–í–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —É–∂–µ –∑–¥–µ—Å—å!",
    "üöÄ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏!",
    "üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –∞–∫—Ü–∏—è!",
    "–°–∫–∏–¥–∫–∏ —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è, –∑–∞—Ö–æ–¥–∏!",
    "–õ—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ!",
    "–ü—Ä–æ–±–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ü–µ–Ω–∏ —Å–∞–º!",
    "–£—Å–ø–µ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—ã–≥–æ–¥–æ–π —Å–µ–π—á–∞—Å!"
]
PRICES = ["100$", "250$", "500$", None]
MEDIA_FOLDER = "C:/Users/user/PycharmProjects/Froggle/test_media"  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ —Ñ–æ—Ç–æ

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç telegram_id={message.from_user.id}")
    await message.answer("–≠—Ç–æ AdSenderBot. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /send_ad –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ Froggle.")

# –ö–æ–º–∞–Ω–¥–∞ /send_ad
@dp.message(Command("send_ad"))
async def send_ad_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /send_ad –æ—Ç telegram_id={message.from_user.id}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    category = random.choice(CATEGORIES)
    city = random.choice(CITIES)
    async for session in get_db():
        tags_list = await get_all_category_tags(category)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not tags_list:
            await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –≤ –±–∞–∑–µ.")
            return
        tag = random.choice(tags_list)[1]  # –ë–µ—Ä—ë–º name –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞ (id, name)

    title_ru = f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{random.randint(1000, 9999)}"
    description_ru = random.choice(DESCRIPTIONS)
    price = random.choice(PRICES)

    media_files = [f for f in os.listdir(MEDIA_FOLDER) if f.endswith(('.jpg', '.png', '.jpeg'))]
    if not media_files:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ test_media.")
        return
    random_media = random.choice(media_files)
    media_path = os.path.join(MEDIA_FOLDER, random_media)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API Froggle
    data = {
        "category": category,
        "city": city,
        "tags": tag,
        "title_ru": title_ru,
        "description_ru": description_ru,
        "price": price if price else "",
        "contact_info": "@TestSender",
        "status": "pending",
        "is_test": True,
        "api_key": API_KEY,
        "user_id": "7937566977"
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ API
    try:
        with open(media_path, "rb") as media_file:
            files = {"media": (random_media, media_file, "image/jpeg")}
            response = requests.post(
                FROGGLE_API_URL,
                data=data,
                files=files
            )
        if response.status_code == 200:
            ad_id = response.json().get("ad_id")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Froggle –≤–µ—Ä–Ω—ë—Ç ID
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –≤ Froggle")
            await message.answer(f"–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Froggle –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API Froggle: {response.status_code} - {response.text}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Froggle: {response.status_code}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ API: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Froggle: {str(e)}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ AdSenderBot...")
    logger.debug("Polling started")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())