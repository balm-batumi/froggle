# tools/utils.py
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo
from database import Advertisement
from loguru import logger
from database import mark_ad_as_viewed
from data.categories import CATEGORIES
from typing import List, Optional
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey


# –°–æ–∑–¥–∞–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "‚ùì" (–ü–æ–º–æ—â—å) –∏ "‚¨ÖÔ∏è" (–ù–∞–∑–∞–¥)
def get_navigation_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚ùì", callback_data="action:help"),
         InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:back")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def format_ad_text(ad: Advertisement, fields: Optional[List[str]] = None, complete: bool = True,
                   show_status: bool = False) -> str | List[str]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—ç—Ç–∞–ø–Ω–æ –∏–ª–∏ —Ü–µ–ª–∏–∫–æ–º.

    Args:
        ad: –û–±—ä–µ–∫—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.
        fields: –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['title', 'description']). –ï—Å–ª–∏ None –∏ complete=False, —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è.
        complete: –ï—Å–ª–∏ True, –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞. –ï—Å–ª–∏ False, —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.
        show_status: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —Å—Ç–∞—Ç—É—Å (–¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏).

    Returns:
        str: –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç (complete=True).
        List[str]: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ (complete=False).
    """
    lines = []

    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    if ad.category:
        lines.append(f"<b>{CATEGORIES[ad.category]['display_name']}</b>")
    if ad.city:
        lines.append(f"–≤ {ad.city}")
    if ad.tags:
        lines.append(f"üè∑Ô∏è {', '.join(ad.tags) if ad.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    fields_to_render = fields if fields else []
    if 'title' in fields_to_render and ad.title_ru:
        lines.append(f"üìå <b>{ad.title_ru}</b>")
    if 'description' in fields_to_render and ad.description_ru:
        lines.append(ad.description_ru)
    if 'price' in fields_to_render:
        lines.append(f"üí∞ {ad.price}" if ad.price else "üí∞ –±–µ–∑ —Ü–µ–Ω—ã")
    if 'contacts' in fields_to_render and ad.contact_info:
        lines.append(f"üìû {ad.contact_info}")
    if 'status' in fields_to_render and show_status and ad.status:
        lines.append(f"–°—Ç–∞—Ç—É—Å: {ad.status}")

    # –í —Ä–µ–∂–∏–º–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    if complete:
        if ad.title_ru and 'title' not in fields_to_render:
            lines.append(f"üìå <b>{ad.title_ru}</b>")
        if ad.description_ru and 'description' not in fields_to_render:
            lines.append(ad.description_ru)
        if 'price' not in fields_to_render:
            lines.append(f"üí∞ {ad.price}" if ad.price else "üí∞ –±–µ–∑ —Ü–µ–Ω—ã")
        if ad.contact_info and 'contacts' not in fields_to_render:
            lines.append(f"üìû {ad.contact_info}")
        if show_status and ad.status and 'status' not in fields_to_render:
            lines.append(f"–°—Ç–∞—Ç—É—Å: {ad.status}")
        return "\n".join(lines)

    return lines


# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ä–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –≥—Ä—É–ø–ø–∞–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ message_id
async def render_ad(ad: Advertisement, bot: Bot, chat_id: int, show_status: bool = False,
                    buttons: list[InlineKeyboardButton] = None, mark_viewed: bool = False):
    message_ids = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ –∑–≤—ë–∑–¥–æ—á–∫–∞–º–∏
    msg1 = await bot.send_message(chat_id=chat_id, text=f"*****       –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.id}       *****")
    message_ids.append(msg1.message_id)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
    if ad.media_file_ids:
        photos = [media for media in ad.media_file_ids if media["type"] == "photo"]
        videos = [media for media in ad.media_file_ids if media["type"] == "video"]

        if photos:
            media_group = [InputMediaPhoto(media=photo["id"]) for photo in photos[:10]]
            photo_msgs = await bot.send_media_group(chat_id=chat_id, media=media_group)
            message_ids.extend(msg.message_id for msg in photo_msgs)
            logger.debug(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad.id}, message_ids={[msg.message_id for msg in photo_msgs]}")

        if videos:
            media_group = [InputMediaVideo(media=video["id"]) for video in videos[:10]]
            video_msgs = await bot.send_media_group(chat_id=chat_id, media=media_group)
            message_ids.extend(msg.message_id for msg in video_msgs)
            logger.debug(
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad.id}, message_ids={[msg.message_id for msg in video_msgs]}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    ad_text = format_ad_text(ad, complete=True, show_status=show_status)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons) if buttons else None
    logger.debug(f"Buttons –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {buttons}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    msg3 = await bot.send_message(chat_id=chat_id, text=ad_text, reply_markup=keyboard, parse_mode="HTML")
    message_ids.append(msg3.message_id)

    # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if mark_viewed and ad.id:
        await mark_ad_as_viewed(str(chat_id), ad.id)

    return message_ids


# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def delete_messages(bot: Bot, chat_id: int, message_ids: list[int]) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏—Ö ID –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.
        chat_id: ID —á–∞—Ç–∞, –≥–¥–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.
        message_ids: –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    """
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")


async def notify_user(bot: Bot, telegram_id: str, text: str, state: FSMContext, reply_markup=None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ, –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.

    Args:
        bot: –û–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        text: –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        state: –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è message_id.
        reply_markup: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é None).
    """
    notification_state = FSMContext(
        storage=state.storage,
        key=StorageKey(bot_id=bot.id, chat_id=int(telegram_id), user_id=int(telegram_id))
    )
    current_data = await notification_state.get_data()
    old_message_id = current_data.get("rejection_notification_id")

    if old_message_id:
        try:
            await bot.delete_message(chat_id=telegram_id, message_id=old_message_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ message_id={old_message_id} –¥–ª—è telegram_id={telegram_id}")
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ message_id={old_message_id}: {e}")

    try:
        msg = await bot.send_message(chat_id=telegram_id, text=text, reply_markup=reply_markup)
        await notification_state.update_data(rejection_notification_id=msg.message_id)
        logger.debug(
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ telegram_id={telegram_id}, message_id={msg.message_id}, text='{text[:35]}...'")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è telegram_id={telegram_id}: {e}")