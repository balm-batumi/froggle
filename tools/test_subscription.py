import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from config import BOT_TOKEN  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤ config.py

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ú–µ–Ω—é"
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ú–µ–Ω—é")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ê–Ω–∞–ª–æ–≥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é Froggle –∫–∞–∫ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_inline_main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª—É–≥–∏", callback_data="category:services"),
         InlineKeyboardButton(text="–ï–¥–∞", callback_data="category:food"),
         InlineKeyboardButton(text="–ñ–∏–ª—å—ë", callback_data="category:housing")],
        [InlineKeyboardButton(text="–û–±—â–µ–Ω–∏–µ", callback_data="category:communication"),
         InlineKeyboardButton(text="–ê–≤—Ç–æ", callback_data="category:auto"),
         InlineKeyboardButton(text="–ë–∞—Ä–∞—Ö–æ–ª–∫–∞", callback_data="category:market")],
        [InlineKeyboardButton(text="–®–æ–ø–ø–∏–Ω–≥", callback_data="category:shopping")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "–¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏: –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç–º—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n–ù–∞–∂–º–∏—Ç–µ '–ú–µ–Ω—é' –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=menu_keyboard
    )
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏
    asyncio.create_task(send_emulated_ads(message.chat.id))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é"
@dp.message(lambda message: message.text == "–ú–µ–Ω—é")
async def menu_handler(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ–Ω—é Froggle! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_inline_main_menu()
    )

# –≠–º—É–ª—è—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def send_emulated_ads(chat_id: int):
    ad_count = 1
    while True:
        await asyncio.sleep(5)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        ad_text = (
            f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢     –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_count}:     ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢\n"
            f"üè∑Ô∏è —Ç–µ—Å—Ç, —ç–º—É–ª—è—Ü–∏—è\n"
            f"<b>–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_count}</b>\n"
            f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_count}\n"
            f"üí∞ {ad_count * 100}$\n"
            f"üìû @testuser"
        )
        await bot.send_message(chat_id=chat_id, text=ad_text)
        ad_count += 1

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("–¢–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())