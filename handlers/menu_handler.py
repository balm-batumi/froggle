from aiogram import Router, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import MenuState, AdAddForm
from database import get_db, User, select, Favorite, Advertisement, remove_from_favorites
from data.constants import get_main_menu_keyboard
from handlers.ad_handler import AD_CATEGORIES
from loguru import logger

menu_router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
ad_start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@menu_router.message(Command("start"))
async def start_handler(message: types.Message):
    telegram_id = str(message.from_user.id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç telegram_id={telegram_id}")

    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            new_user = User(
                telegram_id=telegram_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                username=message.from_user.username
            )
            session.add(new_user)
            await session.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id}")
        else:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Froggle! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_menu_keyboard()
    )

@menu_router.callback_query(lambda call: call.data == "action:help")
async def help_handler(call: types.CallbackQuery):
    await call.message.edit_text(
        "Froggle ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
        replying_markup=get_main_menu_keyboard()
    )
    await call.answer()

@menu_router.callback_query(lambda call: call.data == "action:settings")
async def settings_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if user and user.is_admin:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_moderate")],
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ])
            await call.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ])
            await call.message.edit_text("–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    await call.answer()

@menu_router.callback_query(lambda call: call.data == "show_favorites")
async def show_favorites_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_menu_keyboard())
            return

        favorites = await session.execute(
            select(Favorite).where(Favorite.user_id == user.id)
        )
        favorites = favorites.scalars().all()

        if not favorites:
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\nüè†:",
                reply_markup=get_main_menu_keyboard()
            )
            return

        await call.message.delete()
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="üîπ <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è</b> üîπ\n" + "‚Äï" * 30
        )

        for index, fav in enumerate(favorites):
            ad_result = await session.execute(
                select(Advertisement).where(Advertisement.id == fav.advertisement_id)
            )
            ad = ad_result.scalar_one_or_none()
            if ad:
                status_text = "‚ö† –£–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º" if ad.status == "deleted" else ""
                # –ó–∞—â–∏—Ç–∞ –æ—Ç None
                title = ad.title_ru if ad.title_ru else "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                description = ad.description_ru if ad.description_ru else "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
                contact_info = ad.contact_info if ad.contact_info else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
                remove_button = InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    callback_data=f"favorite:remove:{ad.id}"
                )
                fav_keyboard = InlineKeyboardMarkup(inline_keyboard=[[remove_button]])

                if ad.media_file_ids and len(ad.media_file_ids) > 0:
                    if len(ad.media_file_ids) == 1:
                        text = (
                            f"#{ad.id}\n"
                            f"<b>{ad.category} –≤ {ad.city}</b>\n"
                            f"üìå {', '.join(ad.tags) if ad.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                            f"{title}\n"
                            f"{description[:1000] + '...' if len(description) > 1000 else description}\n"
                            f"–∫–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}\n"
                            f"{status_text}"
                        )
                        try:
                            await call.message.bot.send_photo(
                                chat_id=call.from_user.id,
                                photo=ad.media_file_ids[0],
                                caption=text,
                                reply_markup=fav_keyboard
                            )
                        except Exception as e:
                            if "can't use file of type Video as Photo" in str(e):
                                await call.message.bot.send_video(
                                    chat_id=call.from_user.id,
                                    video=ad.media_file_ids[0],
                                    caption=text,
                                    reply_markup=fav_keyboard
                                )
                            else:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID {ad.id}: {e}")
                                await call.message.bot.send_message(
                                    chat_id=call.from_user.id,
                                    text=f"{text}\n‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞",
                                    reply_markup=fav_keyboard
                                )
                    else:
                        media_group = [
                            types.InputMediaPhoto(media=file_id)
                            for file_id in ad.media_file_ids[:10]
                        ]
                        await call.message.bot.send_media_group(
                            chat_id=call.from_user.id,
                            media=media_group
                        )
                        text = (
                            f"#{ad.id}\n"
                            f"<b>{ad.category} –≤ {ad.city}</b>\n"
                            f"üìå {', '.join(ad.tags) if ad.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                            f"{title}\n"
                            f"{description[:1000] + '...' if len(description) > 1000 else description}\n"
                            f"–∫–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}\n"
                            f"{status_text}"
                        )
                        await call.message.bot.send_message(
                            chat_id=call.from_user.id,
                            text=text,
                            reply_markup=fav_keyboard
                        )
                else:
                    text = (
                        f"#{ad.id}\n"
                        f"<b>{ad.category} –≤ {ad.city}</b>\n"
                        f"üìå {', '.join(ad.tags) if ad.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                        f"{title}\n"
                        f"{description[:1000] + '...' if len(description) > 1000 else description}\n"
                        f"–∫–æ–Ω—Ç–∞–∫—Ç—ã: {contact_info}\n"
                        f"{status_text}"
                    )
                    await call.message.bot.send_message(
                        chat_id=call.from_user.id,
                        text=text,
                        reply_markup=fav_keyboard
                    )
            else:
                text = f"#{fav.advertisement_id}\n‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
                remove_button = InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    callback_data=f"favorite:remove:{fav.advertisement_id}"
                )
                fav_keyboard = InlineKeyboardMarkup(inline_keyboard=[[remove_button]])
                await call.message.bot.send_message(
                    chat_id=call.from_user.id,
                    text=text,
                    reply_markup=fav_keyboard
                )

            if index < len(favorites) - 1:
                await call.message.bot.send_message(
                    chat_id=call.from_user.id,
                    text="‚Ä¢‚Ä¢‚Ä¢"
                )

        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:settings")
        ]])
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=back_keyboard
        )
    await call.answer()

@menu_router.callback_query(lambda call: call.data.startswith("favorite:remove:"))
async def remove_from_favorites_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    _, action, ad_id = call.data.split(":", 2)
    ad_id = int(ad_id)

    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if await remove_from_favorites(user.id, ad_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–¥–∞–ª–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            await call.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", show_alert=True)
        else:
            await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=True)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    await show_favorites_handler(call)

@menu_router.callback_query(lambda call: call.data == "action:back")
async def back_handler(call: types.CallbackQuery):
    await call.message.edit_text(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†:",
        reply_markup=get_main_menu_keyboard()
    )
    await call.answer()