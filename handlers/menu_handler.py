from aiogram import Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from states import MenuState, AdAddForm, SubscribeForm, AdsViewForm
from database import get_db, User, select, Favorite, Advertisement, remove_from_favorites, add_to_favorites, Subscription, get_cities, get_all_category_tags, Tag, ViewedAds
from data.constants import get_main_menu_keyboard
from data.categories import CATEGORIES
from tools.utils import render_ad, get_navigation_keyboard
from loguru import logger
from sqlalchemy.sql import func


menu_router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥–º–µ–Ω—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
ad_start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å"), KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@menu_router.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç telegram_id={telegram_id}")

    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            new_user = User(
                telegram_id=telegram_id,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                username=message.from_user.username
            )
            session.add(new_user)
            await session.commit()
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id}")
        else:
            logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    await state.set_state(AdsViewForm.select_category)
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π: {get_main_menu_keyboard().__class__.__name__}")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Froggle! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç —Å –∑–∞–≥–ª—É—à–∫–æ–π
@menu_router.callback_query(F.data == "action:help")
async def help_handler(call: types.CallbackQuery):
    await call.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–æ–º–æ—â—å", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
@menu_router.callback_query(F.data == "action:settings")
async def settings_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if user and user.is_admin:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_moderate")],
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ú–æ–∏", callback_data="show_my_ads")],
                [InlineKeyboardButton(text="üì© –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="action:subscriptions")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:back")]
            ])
            await call.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:", reply_markup=keyboard)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ú–æ–∏", callback_data="show_my_ads")],
                [InlineKeyboardButton(text="üì© –ü–æ–¥–ø–∏—Å–∫–∏", callback_data="action:subscriptions")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:back")]
            ])
            await call.message.edit_text("–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=keyboard)
    await call.answer()


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∏ –≤—Å–µ—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
@menu_router.callback_query(F.data == "action:subscriptions")
async def subscriptions_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)

    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscriptions_result = await session.execute(
            select(Subscription).where(Subscription.user_id == user.id)
        )
        subscriptions = subscriptions_result.scalars().all()

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.delete()

        if not subscriptions:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="action:subscribe")]
            ])
            keyboard.inline_keyboard.extend(get_navigation_keyboard().inline_keyboard)
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É!",
                reply_markup=keyboard
            )
        else:
            # –í—ã–≤–æ–¥–∏–º –∫–∞–∂–¥—É—é –ø–æ–¥–ø–∏—Å–∫—É
            for sub in subscriptions:
                # –ü–æ–¥—Å—á–µ—Ç –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
                missed_count = await session.scalar(
                    select(func.count(Advertisement.id))
                    .where(Advertisement.status == "approved")
                    .where(Advertisement.city == sub.city)
                    .where(Advertisement.category == sub.category)
                    .where(~Advertisement.id.in_(select(ViewedAds.advertisement_id).where(ViewedAds.user_id == user.id)))
                    .where(Advertisement.tags.overlap(sub.tags))
                )
                sub_text = (
                    f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sub.id}\n"
                    f"–ì–æ—Ä–æ–¥: {sub.city}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[sub.category]['display_name']}\n"
                    f"–¢–µ–≥–∏: {', '.join(sub.tags)}"
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text=f"üîî –ù–æ–≤—ã–µ ({missed_count})" if missed_count > 0 else "üîî –ù–æ–≤—ã—Ö –Ω–µ—Ç",
                                          callback_data=f"show_new_ads:{sub.id}"),
                     InlineKeyboardButton(text="üìã –í—Å–µ", callback_data=f"show_all_ads:{sub.id}")],
                    [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_subscription:{sub.id}")]
                ])
                await call.message.bot.send_message(
                    chat_id=call.from_user.id,
                    text=sub_text,
                    reply_markup=keyboard
                )

            # –ù–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å get_navigation_keyboard
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–ü–æ–∫–∞üîí)", callback_data="disabled")]
            ])
            keyboard.inline_keyboard.extend(get_navigation_keyboard().inline_keyboard)
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üëÜ",
                reply_markup=keyboard
            )

    await call.answer()



# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: –Ω–æ–≤—ã–µ (–Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ) –∏–ª–∏ –≤—Å–µ
@menu_router.callback_query(F.data.startswith(("show_new_ads:", "show_all_ads:")))
async def show_subscription_ads(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    callback_data = call.data
    action, sub_id = callback_data.split(":", 1)
    sub_id = int(sub_id)
    only_new = action == "show_new_ads"  # True –¥–ª—è "–ù–æ–≤—ã–µ", False –¥–ª—è "–í—Å–µ"

    async for session in get_db():
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        sub_result = await session.execute(
            select(Subscription).where(Subscription.id == sub_id, Subscription.user_id == user.id)
        )
        subscription = sub_result.scalar_one_or_none()
        if not subscription:
            await call.message.edit_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                                         reply_markup=get_main_menu_keyboard())
            return

        # –ó–∞–ø—Ä–æ—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–¥–ø–∏—Å–∫–∏
        query = select(Advertisement).where(
            Advertisement.status == "approved",
            Advertisement.city == subscription.city,
            Advertisement.category == subscription.category,
            Advertisement.tags.overlap(subscription.tags)
        )
        if only_new:
            query = query.where(~Advertisement.id.in_(
                select(ViewedAds.advertisement_id).where(ViewedAds.user_id == user.id)
            ))

        ads_result = await session.execute(query.order_by(Advertisement.id))
        ads = ads_result.scalars().all()

        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.delete()

        if not ads:
            keyboard = get_navigation_keyboard()
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–û–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=keyboard
            )
        else:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text=f"–ù–∞–π–¥–µ–Ω–æ {len(ads)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ #{sub_id}\n" + "‚Äï" * 21
            )
            for ad in ads:
                buttons = [[InlineKeyboardButton(
                    text="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callback_data=f"favorite:add:{ad.id}"
                )]]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=False, buttons=buttons, mark_viewed=True)

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            keyboard = get_navigation_keyboard()
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                reply_markup=keyboard
            )

    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
@menu_router.callback_query(F.data == "disabled")
async def disabled_button_handler(call: types.CallbackQuery):
    await call.answer("–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data == "action:subscribe")
async def subscribe_start_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_menu_keyboard())
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã
        cities = await get_cities()
        main_cities = ["–¢–±–∏–ª–∏—Å–∏", "–ë–∞—Ç—É–º–∏", "–ö—É—Ç–∞–∏—Å–∏", "–ì–æ—Ä–∏"]  # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
        buttons = [
            InlineKeyboardButton(text=city, callback_data=f"subscribe_city:{city}")
            for city in main_cities if city in cities
        ]
        keyboard_rows = [buttons[i:i + 2] for i in range(0, len(buttons), 2)]  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        keyboard_rows.append([
            InlineKeyboardButton(text="–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞", callback_data="subscribe_city_other"),
            InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_city"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
        await state.set_state("SubscribeForm:select_city")
        await call.answer()


# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â—ë –Ω–µ—Ç
from aiogram.filters import StateFilter


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ "–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞" –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data == "subscribe_city_other", StateFilter("SubscribeForm:select_city"))
async def subscribe_city_other_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã
        cities = await get_cities()
        main_cities = ["–¢–±–∏–ª–∏—Å–∏", "–ë–∞—Ç—É–º–∏", "–ö—É—Ç–∞–∏—Å–∏", "–ì–æ—Ä–∏"]  # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã
        other_cities = [city for city in cities.keys() if city not in main_cities]
        buttons = [
            InlineKeyboardButton(text=city, callback_data=f"subscribe_city:{city}")
            for city in other_cities
        ]
        keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        keyboard_rows.append([
            InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_city"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
        await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data.startswith("subscribe_city:"), StateFilter("SubscribeForm:select_city"))
async def subscribe_city_select_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ callback_data
    city = call.data.split(":", 1)[1]
    await state.update_data(city=city)

    # –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ CATEGORIES
    buttons = [
        InlineKeyboardButton(text=CATEGORIES[cat]["display_name"], callback_data=f"subscribe_category:{cat}")
        for cat in CATEGORIES
    ]
    keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard_rows.append([
        InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_category"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
    ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
    await state.set_state(SubscribeForm.select_category)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data.startswith("subscribe_category:"), StateFilter("SubscribeForm:select_category"))
async def subscribe_category_select_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
    category = call.data.split(":", 1)[1]
    await state.update_data(category=category)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    tags = await get_all_category_tags(category)
    buttons = [
        InlineKeyboardButton(text=name, callback_data=f"subscribe_tag:{id}")
        for id, name in tags
    ]
    keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    keyboard_rows.append([
        InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_tags"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
    ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)
    await state.set_state(SubscribeForm.select_tags)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data.startswith("subscribe_tag:"), StateFilter("SubscribeForm:select_tags"))
async def subscribe_tag_select_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ–≥–∞ –∏–∑ callback_data
    tag_id = int(call.data.split(":", 1)[1])
    data = await state.get_data()
    category = data.get("category")
    tags = data.get("tags", [])  # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤

    if len(tags) >= 3:
        await call.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º 3 —Ç–µ–≥–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–µ
    async for session in get_db():
        result = await session.execute(select(Tag).where(Tag.id == tag_id))
        tag = result.scalar_one_or_none()
        if tag and tag.name not in tags:
            tags.append(tag.name)
            await state.update_data(tags=tags)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    all_tags = await get_all_category_tags(category)
    buttons = [
        InlineKeyboardButton(text=name, callback_data=f"subscribe_tag:{id}")
        for id, name in all_tags
    ]
    keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    if tags:  # –î–æ–±–∞–≤–ª—è–µ–º "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ–≥
        keyboard_rows.append([InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="subscribe_confirm")])
    keyboard_rows.append([
        InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_tags"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
    ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

    await call.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(tags) if tags else '–Ω–∏—á–µ–≥–æ'}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 3 —Ç–µ–≥–æ–≤ –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ:",
        reply_markup=keyboard
    )
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data == "subscribe_confirm", StateFilter("SubscribeForm:select_tags"))
async def subscribe_confirm_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.",
                                         reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city = data.get("city")
    category = data.get("category")
    tags = data.get("tags", [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    sub_text = (
        "–ü–æ–¥–ø–∏—Å–∫–∞:\n"
        f"–ì–æ—Ä–æ–¥: {city}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[category]['display_name']}\n"
        f"–¢–µ–≥–∏: {', '.join(tags) if tags else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}"
    )

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_subscription"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_subscription"),
        InlineKeyboardButton(text="‚ùì", callback_data="help:subscribe_confirm")
    ]])

    await call.message.edit_text(sub_text, reply_markup=keyboard)
    await state.set_state(SubscribeForm.confirm)
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
@menu_router.callback_query(F.data == "save_subscription", StateFilter("SubscribeForm:confirm"))
async def save_subscription_handler(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_menu_keyboard())
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        city = data.get("city")
        category = data.get("category")
        tags = data.get("tags", [])

        # –°–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∏—Å–∫—É
        subscription = Subscription(
            user_id=user.id,
            city=city,
            category=category,
            tags=tags
        )
        session.add(subscription)
        await session.commit()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="action:subscriptions")
    ]])
    await call.message.edit_text("–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=keyboard)
    await state.clear()
    await call.answer()


@menu_router.callback_query(F.data == "show_my_ads")
async def show_my_ads_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_menu_keyboard())
            return

        ads_result = await session.execute(
            select(Advertisement)
            .where(Advertisement.user_id == user.id, Advertisement.status.in_(["approved", "pending"]))
            .order_by(Advertisement.id)
        )
        ads = ads_result.scalars().all()

        if not ads:
            await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n:", reply_markup=get_main_menu_keyboard())
            return

        await call.message.delete()
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n" + "‚Äï" * 27
        )

        for ad in ads:
            buttons = [[InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_ad:{ad.id}")]]
            await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)

        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:settings")
        ]])
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
            reply_markup=back_keyboard
        )




@menu_router.callback_query(F.data.startswith("delete_ad:"))
async def delete_ad_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    ad_id = int(call.data.split(":")[1])

    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        ad_result = await session.execute(
            select(Advertisement).where(Advertisement.id == ad_id, Advertisement.user_id == user.id)
        )
        ad = ad_result.scalar_one_or_none()
        if not ad:
            await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç.", show_alert=True)
            return

        ad.status = "deleted"
        await session.commit()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–º–µ—Ç–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–µ")

        await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —É–¥–∞–ª—ë–Ω–Ω–æ–µ!", show_alert=True)
        await call.message.bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)

        if user.is_admin:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ú–æ–¥–µ—Ä–∞—Ü–∏—è", callback_data="admin_moderate")],
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ú–æ–∏", callback_data="show_my_ads")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ])
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞:",
                reply_markup=keyboard
            )
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites")],
                [InlineKeyboardButton(text="–ú–æ–∏", callback_data="show_my_ads")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ])
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=keyboard
            )

@menu_router.callback_query(F.data == "show_favorites")
async def show_favorites_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", reply_markup=get_main_menu_keyboard())
            return

        favorites = await session.execute(
            select(Favorite).where(Favorite.user_id == user.id)
        )
        favorites = favorites.scalars().all()

        if not favorites:
            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π",
                reply_markup=get_main_menu_keyboard()
            )
            return

        await call.message.delete()
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n" + "‚Äï" * 27
        )

        for fav in favorites:
            ad_result = await session.execute(
                select(Advertisement).where(Advertisement.id == fav.advertisement_id)
            )
            ad = ad_result.scalar_one_or_none()
            if ad:
                buttons = [[InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    callback_data=f"favorite:remove:{ad.id}"
                )]]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            else:
                text = f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ"
                remove_button = InlineKeyboardButton(
                    text="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                    callback_data=f"favorite:remove:{fav.advertisement_id}"
                )
                fav_keyboard = InlineKeyboardMarkup(inline_keyboard=[[remove_button]])
                await call.message.bot.send_message(
                    chat_id=call.from_user.id,
                    text=f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢     –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{fav.advertisement_id}:     ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                )
                await call.message.bot.send_message(
                    chat_id=call.from_user.id,
                    text=text,
                    reply_markup=fav_keyboard
                )

        back_keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:settings")]
        ])
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=back_keyboard
        )
    await call.answer()

@menu_router.callback_query(F.data.startswith("favorite:remove:"))
async def remove_from_favorites_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    _, action, ad_id = call.data.split(":", 2)
    ad_id = int(ad_id)

    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        if await remove_from_favorites(user.id, ad_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} —É–¥–∞–ª–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
            await call.answer("–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!", show_alert=True)
        else:
            await call.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=True)

    await show_favorites_handler(call)


# –î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@menu_router.callback_query(F.data.startswith("favorite:add:"))
async def add_to_favorites_handler(call: types.CallbackQuery):
    telegram_id = str(call.from_user.id)
    ad_id = int(call.data.split(":", 2)[2])

    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        favorite_id = await add_to_favorites(user.id, ad_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, favorite_id={favorite_id}")
        await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)


@menu_router.callback_query(F.data == "action:back")
async def back_handler(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdsViewForm.select_category)
    await call.message.edit_text(  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ edit_text –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_menu_keyboard()
    )
    await call.answer()