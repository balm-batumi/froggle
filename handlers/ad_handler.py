from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F
from states import AdAddForm
from database import get_db, User, Tag, City, Advertisement, add_advertisement, get_category_tags, get_cities, select
from data.constants import get_main_menu_keyboard
from loguru import logger
import asyncio

ad_router = Router()

# –•–∞—Ä–¥–∫–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Ä–µ–º–µ–Ω–Ω–æ, –¥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ data/categories.py)
AD_CATEGORIES = {
    "–£—Å–ª—É–≥–∏": {
        "tag_category": "–£—Å–ª—É–≥–∏",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É—Å–ª—É–≥–∏:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É —É—Å–ª—É–≥–∏:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è —É—Å–ª—É–≥–∏ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Å—Ñ–µ—Ä—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ–¥—Ä–æ–±–Ω–æ.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–ï–¥–∞": {
        "tag_category": "–ï–¥–∞",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –µ–¥—ã:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥—ã:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥—ã.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ –∏–ª–∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–ñ–∏–ª—å—ë": {
        "tag_category": "–ñ–∏–ª—å—ë",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∂–∏–ª—å—è:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∂–∏–ª—å—è:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª—å—è:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–∏–ª—å—è:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∂–∏–ª—å—è (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Ç–∏–ø –∂–∏–ª—å—è.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ –∂–∏–ª—å—ë –ø–æ–¥—Ä–æ–±–Ω–æ.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–û–±—â–µ–Ω–∏–µ": {
        "tag_category": "–û–±—â–µ–Ω–∏–µ",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –æ–±—â–µ–Ω–∏—è:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ü–µ–ª—å –æ–±—â–µ–Ω–∏—è.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –æ–±—â–µ–Ω–∏—è.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–ê–≤—Ç–æ": {
        "tag_category": "–ê–≤—Ç–æ",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–≤—Ç–æ:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–≤—Ç–æ.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ –∞–≤—Ç–æ –∏–ª–∏ —É—Å–ª—É–≥—É.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–ë–∞—Ä–∞—Ö–æ–ª–∫–∞": {
        "tag_category": "–ë–∞—Ä–∞—Ö–æ–ª–∫–∞",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –±–∞—Ä–∞—Ö–æ–ª–∫–∏:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä –ø–æ–¥—Ä–æ–±–Ω–æ.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    },
    "–®–æ–ø–ø–∏–Ω–≥": {
        "tag_category": "–®–æ–ø–ø–∏–Ω–≥",
        "multiple_tags": False,
        "texts": {
            "city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —à–æ–ø–ø–∏–Ω–≥–∞:",
            "tags": "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–æ–ø–ø–∏–Ω–≥–∞:",
            "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
            "description": "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:",
            "media": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤):",
            "contacts": "–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:",
            "help_city": "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            "help_tags": "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —à–æ–ø–ø–∏–Ω–≥–∞.",
            "help_title": "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤).",
            "help_description": "–û–ø–∏—à–∏—Ç–µ —à–æ–ø–ø–∏–Ω–≥ –∏–ª–∏ —Ç–æ–≤–∞—Ä.",
            "help_media": "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ.",
            "help_contacts": "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∏–ª–∏ email."
        }
    }
}

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@ad_router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë")
async def process_ad_start(message: types.Message, state: FSMContext):
    logger.info(f"process_ad_start –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è telegram_id={message.from_user.id}")
    data = await state.get_data()
    category = data.get("category")
    if not category or category not in AD_CATEGORIES:
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞: {category}")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.\nüè†:", reply_markup=get_main_menu_keyboard())
        return

    logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –¥–ª—è telegram_id={message.from_user.id}")
    await state.set_state(AdAddForm.city)
    await state.update_data(category=category)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–±–∏–ª–∏—Å–∏", callback_data=f"city:{category}:–¢–±–∏–ª–∏—Å–∏"),
         InlineKeyboardButton(text="–ë–∞—Ç—É–º–∏", callback_data=f"city:{category}:–ë–∞—Ç—É–º–∏")],
        [InlineKeyboardButton(text="–ö—É—Ç–∞–∏—Å–∏", callback_data=f"city:{category}:–ö—É—Ç–∞–∏—Å–∏"),
         InlineKeyboardButton(text="–ì–æ—Ä–∏", callback_data=f"city:{category}:–ì–æ—Ä–∏")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data=f"city_other:{category}"),
         InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:city"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await message.answer(
        AD_CATEGORIES[category]["texts"]["city"],
        reply_markup=keyboard
    )

# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@ad_router.callback_query(F.data.startswith("city:"), StateFilter(AdAddForm.city))
async def process_city_selection(call: types.CallbackQuery, state: FSMContext):
    _, category, city = call.data.split(":", 2)
    data = await state.get_data()
    logger.info(f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥ '{city}' –¥–ª—è telegram_id={call.from_user.id} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}")

    await state.update_data(city=city)
    tags = await get_category_tags(AD_CATEGORIES[category]["tag_category"])
    if not tags:
        await call.message.edit_text(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\nüè†:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return

    buttons = [[InlineKeyboardButton(text=name, callback_data=f"tag_select:{id}")] for id, name in tags]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    await call.message.edit_text(
        AD_CATEGORIES[category]["texts"]["tags"],
        reply_markup=keyboard
    )
    await call.answer()
    await state.set_state(AdAddForm.tags)

# –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@ad_router.callback_query(F.data.startswith("city_other:"), StateFilter(AdAddForm.city))
async def process_city_other(call: types.CallbackQuery, state: FSMContext):
    category = call.data.split(":", 1)[1]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –≤—ã–±—Ä–∞–ª '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")

    cities = await get_cities()
    main_cities = ["–¢–±–∏–ª–∏—Å–∏", "–ë–∞—Ç—É–º–∏", "–ö—É—Ç–∞–∏—Å–∏", "–ì–æ—Ä–∏"]
    other_cities = [city[1] for city in cities if city[1] not in main_cities]
    buttons = [
        InlineKeyboardButton(text=city, callback_data=f"city:{category}:{city}")
        for city in other_cities
    ]
    keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:",
        reply_markup=keyboard
    )
    await call.answer()

# –í—ã–±–æ—Ä —Ç–µ–≥–æ–≤
@ad_router.callback_query(F.data.startswith("tag_select:"), StateFilter(AdAddForm.tags))
async def process_ad_tags(call: types.CallbackQuery, state: FSMContext):
    tag_id = int(call.data.split(":", 1)[1])
    data = await state.get_data()
    category = data.get("category")

    async for session in get_db():
        result = await session.execute(select(Tag).where(Tag.id == tag_id))
        tag = result.scalar_one_or_none()
        if tag:
            tags = [tag.name] if not AD_CATEGORIES[category]["multiple_tags"] else data.get("tags", []) + [tag.name]
            await state.update_data(tags=tags)
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:title"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
            ])
            await call.message.edit_text(
                f"–í—ã–±—Ä–∞–Ω–æ: {', '.join(tags)}\n{AD_CATEGORIES[category]['texts']['title']}",
                reply_markup=keyboard
            )
            await state.set_state(AdAddForm.title)
    await call.answer()

# –í–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@ad_router.message(StateFilter(AdAddForm.title))
async def process_ad_title(message: types.Message, state: FSMContext):
    title = message.text.strip()
    data = await state.get_data()
    category = data.get("category")
    await state.update_data(title=title)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:description"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await message.answer(
        AD_CATEGORIES[category]["texts"]["description"],
        reply_markup=keyboard
    )
    await state.set_state(AdAddForm.description)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
@ad_router.message(StateFilter(AdAddForm.description))
async def process_ad_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    data = await state.get_data()
    category = data.get("category")
    await state.update_data(description=description)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ", callback_data="media_confirm"),
         InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞", callback_data="media_skip")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:media"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await message.answer(
        AD_CATEGORIES[category]["texts"]["media"],
        reply_markup=keyboard
    )
    await state.set_state(AdAddForm.media)


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞

@ad_router.message(F.photo | F.video, StateFilter(AdAddForm.media))
async def process_ad_media(message: types.Message, state: FSMContext):
    if message.from_user.is_bot:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ {message.from_user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return

    file_id = message.photo[-1].file_id if message.photo else message.video.file_id if message.video else None
    if not file_id:
        logger.debug(f"–ù–µ—Ç file_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç {message.from_user.id}")
        return

    media_group_id = message.media_group_id
    data = await state.get_data()
    category = data.get("category")
    media_file_ids = data.get("media_file_ids", [])
    media_message_id = data.get("media_message_id")
    media_groups = data.get("media_groups", {})
    last_group_time = data.get("last_group_time", 0)
    current_time = asyncio.get_event_loop().time()
    logger.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: file_count={len(media_file_ids)}, media_message_id={media_message_id}, media_group_id={media_group_id}")

    if file_id not in media_file_ids:
        media_file_ids.append(file_id)
        if media_group_id:
            # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≥—Ä—É–ø–ø—ã
            group_files = media_groups.get(media_group_id, [])
            group_files.append(file_id)
            media_groups[media_group_id] = group_files
            await state.update_data(media_file_ids=media_file_ids[:10], media_groups=media_groups, last_group_time=current_time)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É: {media_group_id}, files={group_files}")

            # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–∞–π–ª–∞ –≥—Ä—É–ø–ø—ã
            await asyncio.sleep(1)
            data = await state.get_data()
            if data.get("last_group_time") == current_time:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å, —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
                file_count = len(data.get("media_file_ids", []))
                text = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤" if file_count > 1 else f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª"
                try:
                    if not media_message_id:
                        msg = await message.answer(text)
                        await state.update_data(media_message_id=msg.message_id)
                        logger.debug(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={msg.message_id}, text='{text}'")
                    else:
                        await message.bot.edit_message_text(
                            text=text,
                            chat_id=message.chat.id,
                            message_id=media_message_id
                        )
                        logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={media_message_id}, text='{text}'")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ –¥–ª—è telegram_id={message.from_user.id}: {e}")
                    await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
                await state.set_state(AdAddForm.contacts)
                await _send_contact_options(message, state)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        else:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª
            file_count = len(media_file_ids)
            text = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤" if file_count > 1 else f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª"
            try:
                if not media_message_id:
                    msg = await message.answer(text)
                    await state.update_data(media_message_id=msg.message_id)
                    logger.debug(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={msg.message_id}, text='{text}'")
                else:
                    await message.bot.edit_message_text(
                        text=text,
                        chat_id=message.chat.id,
                        message_id=media_message_id
                    )
                    logger.debug(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={media_message_id}, text='{text}'")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞ –¥–ª—è telegram_id={message.from_user.id}: {e}")
                await message.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
            await state.set_state(AdAddForm.contacts)
            await _send_contact_options(message, state)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
    else:
        logger.debug(f"–§–∞–π–ª {file_id} —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è {message.from_user.id}")


@ad_router.callback_query(F.data == "media_confirm", StateFilter(AdAddForm.media))
async def process_ad_complete(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    media_file_ids = data.get("media_file_ids", [])
    file_count = len(media_file_ids)
    text = f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {file_count} —Ñ–∞–π–ª–æ–≤" if file_count > 0 else "–ú–µ–¥–∏–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ", callback_data="confirm_contact")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await call.message.edit_text(text, reply_markup=keyboard)
    await state.set_state(AdAddForm.contacts)




# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞
@ad_router.callback_query(F.data == "media_confirm", StateFilter(AdAddForm.media))
async def process_ad_complete(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    media_file_ids = data.get("media_file_ids", [])
    if media_file_ids:
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ –¥–ª—è telegram_id={call.from_user.id}, —Ñ–∞–π–ª—ã: {media_file_ids}")
        await call.message.edit_text(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(media_file_ids)} —Ñ–∞–π–ª–æ–≤")
    else:
        logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –±–µ–∑ –º–µ–¥–∏–∞ –¥–ª—è telegram_id={call.from_user.id}")
        await call.message.edit_text("–ú–µ–¥–∏–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    if call.from_user.is_bot:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ‚Äî –±–æ—Ç, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\nüè†:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
    else:
        logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        await state.set_state(AdAddForm.contacts)
        await _send_contact_options(call, state)


# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞
@ad_router.callback_query(F.data == "media_skip", StateFilter(AdAddForm.media))
async def process_ad_skip(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(media_file_ids=None)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–≥—Ä—É–∑–∫—É –º–µ–¥–∏–∞")
    await call.message.edit_text("–ú–µ–¥–∏–∞ –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    if call.from_user.is_bot:
        logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.id} ‚Äî –±–æ—Ç, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\nüè†:",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
    else:
        logger.debug(f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
        await state.set_state(AdAddForm.contacts)
        await _send_contact_options(call, state)
    await call.answer()

async def _send_contact_options(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    username = message.from_user.username
    data = await state.get_data()
    if message.from_user.is_bot:
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ {telegram_id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return

    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è {telegram_id}")
    async for session in get_db():
        result = await session.execute(
            select(Advertisement.contact_info)
            .where(Advertisement.user_id == select(User.id).where(User.telegram_id == telegram_id).scalar_subquery())
            .order_by(Advertisement.created_at.desc())
            .limit(1)
        )
        saved_contact = result.scalar_one_or_none()
        logger.debug(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è {telegram_id}: {saved_contact}")

    buttons = []
    if username:
        buttons.append([InlineKeyboardButton(text=f"–≤–≤–µ—Å—Ç–∏ —é–∑–µ—Ä–Ω–µ–π–º: @{username}", callback_data="contact:username")])
    if saved_contact:
        buttons.append([InlineKeyboardButton(text=f"–∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ –ë–î: {saved_contact}", callback_data="contact:saved")])
    buttons.append([InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{data.get('category', 'unknown')}:contacts"),
                    InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –¥–ª—è {telegram_id}")
    await message.bot.send_message(
        chat_id=message.from_user.id,
        text=AD_CATEGORIES[data.get('category', 'unknown')]["texts"]["contacts"],
        reply_markup=keyboard
    )


# –í—ã–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@ad_router.callback_query(F.data.startswith("contact:"), StateFilter(AdAddForm.contacts))
async def process_contact_choice(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split(":", 1)[1]
    username = call.from_user.username
    telegram_id = str(call.from_user.id)
    data = await state.get_data()

    async for session in get_db():
        result = await session.execute(
            select(Advertisement.contact_info)
            .where(Advertisement.user_id == select(User.id).where(User.telegram_id == str(telegram_id)).scalar_subquery())
            .order_by(Advertisement.created_at.desc())
            .limit(1)
        )
        saved_contact = result.scalar_one_or_none()

    if action == "username" and username:
        contact_text = f"@{username}"
    elif action == "saved" and saved_contact:
        contact_text = saved_contact
    else:
        await call.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞.", show_alert=True)
        return

    await state.update_data(selected_contact=contact_text)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_contact")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{data.get('category', 'unknown')}:contacts"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
    ])
    await call.message.edit_text(
        f"–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫: <code>{contact_text}</code>\n–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ:",
        reply_markup=keyboard
    )
    await call.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@ad_router.callback_query(F.data == "confirm_contact", StateFilter(AdAddForm.contacts))
async def process_confirm_contact(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_contact = data.get("selected_contact", "")
    if not selected_contact:
        await call.message.edit_text("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\nüè†:", reply_markup=get_main_menu_keyboard())
        await state.clear()
        return

    await state.update_data(contacts=selected_contact)
    preview = (
        f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–µ–≥–∏: {', '.join(data['tags']) if data['tags'] else '–Ω–µ—Ç'}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ú–µ–¥–∏–∞: {'–ï—Å—Ç—å' if data.get('media_file_ids') else '–ù–µ—Ç'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {selected_contact}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:save"),
         InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:cancel")]
    ])
    await call.message.edit_text(preview, reply_markup=keyboard)
    await state.set_state(AdAddForm.confirm)
    await call.answer()

# –í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
@ad_router.message(StateFilter(AdAddForm.contacts))
async def process_ad_contacts_manual(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    selected_contact = data.get("selected_contact", "")
    additional_text = message.text.strip()

    contacts = f"{selected_contact} {additional_text}" if selected_contact and additional_text else selected_contact or additional_text
    if not contacts:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:contacts"),
             InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ])
        await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:", reply_markup=keyboard)
        return

    await state.update_data(contacts=contacts)
    preview = (
        f"–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–µ–≥–∏: {', '.join(data['tags']) if data['tags'] else '–Ω–µ—Ç'}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–ú–µ–¥–∏–∞: {'–ï—Å—Ç—å' if data.get('media_file_ids') else '–ù–µ—Ç'}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {contacts}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm:save"),
         InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:cancel")]
    ])
    await message.answer(preview, reply_markup=keyboard)
    await state.set_state(AdAddForm.confirm)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@ad_router.callback_query(F.data.startswith("confirm:"), StateFilter(AdAddForm.confirm))
async def process_ad_confirm(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split(":", 1)[1]
    data = await state.get_data()
    telegram_id = str(call.from_user.id)

    if action == "save":
        async for session in get_db():
            stmt = select(User.id).where(User.telegram_id == telegram_id)
            result = await session.execute(stmt)
            user_id = result.scalar_one_or_none()
            if not user_id:
                await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.\nüè†:", reply_markup=get_main_menu_keyboard())
                await state.clear()
                return
            ad_id = await add_advertisement(
                user_id=user_id,
                category=data["category"],
                city=data["city"],
                title_ru=data["title"],
                description_ru=data["description"],
                tags=data.get("tags", []),
                media_file_ids=data.get("media_file_ids"),
                contact_info=data["contacts"]
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è telegram_id={telegram_id}")
        await call.message.edit_text(
            f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é\nüè†:",
            reply_markup=get_main_menu_keyboard()
        )
    elif action == "cancel":
        await call.message.edit_text(
            f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ\nüè†:",
            reply_markup=get_main_menu_keyboard()
        )
    await state.clear()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
@ad_router.callback_query(F.data == "back", StateFilter(AdAddForm))
async def process_ad_back(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\nüè†:", reply_markup=get_main_menu_keyboard())
    await state.clear()
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ü–æ–º–æ—â—å" –¥–ª—è –≤—Å–µ—Ö —à–∞–≥–æ–≤
@ad_router.callback_query(F.data.startswith("help:"), StateFilter(AdAddForm))
async def process_ad_help(call: types.CallbackQuery, state: FSMContext):
    _, category, step = call.data.split(":", 2)
    data = await state.get_data()
    category = data.get("category", category)
    help_text = AD_CATEGORIES[category]["texts"].get(f"help_{step}", "–ü–æ–º–æ—â—å –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await call.message.bot.send_message(
        chat_id=call.from_user.id,
        text=help_text
    )
    await call.answer()