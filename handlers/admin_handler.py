# handlers/admin_handler.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Froggle
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F
from states import AdminForm, AdsViewForm
from database import get_db, User, Advertisement, select, ViewedAds, Subscription
from data.constants import get_main_menu_keyboard
from loguru import logger
from tools.utils import render_ad

admin_router = Router()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–µ—Ä–∞—Ü–∏—è" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@admin_router.callback_query(F.data == "admin_moderate")
async def admin_moderate(call: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω admin_moderate —Å callback_data={call.data}, from_id={call.from_user.id}")
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω telegram_id={telegram_id}")
    async for session in get_db():
        logger.debug("–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ë–î")
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —é–∑–µ—Ä–∞: {user}")
        if not user or not user.is_admin:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        result = await session.execute(
            select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
        )
        ads = result.scalars().all()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {len(ads)}, IDs: {[ad.id for ad in ads]}")
        if not ads:
            logger.debug("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –Ω–µ—Ç")
            await call.message.edit_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        for ad in ads:
            buttons = [
                [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                 InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                 InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
            ]
            logger.debug(f"–†–µ–Ω–¥–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad.id} —Å –∫–Ω–æ–ø–∫–∞–º–∏: {buttons}")
            await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=False)

        final_buttons = [
            [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
             InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
        ]
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫: {final_buttons}")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
        )
        logger.debug("–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")

    logger.debug(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è AdminForm:moderation –¥–ª—è telegram_id={telegram_id}")
    await state.set_state(AdminForm.moderation)
    logger.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    await call.answer()
    logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ admin_moderate")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–¥–æ–±—Ä–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("approve:"))
async def approve_ad(call: types.CallbackQuery):
    logger.debug(f"–í—ã–∑–≤–∞–Ω approve_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    ad_id = int(call.data.split(":", 1)[1])
    telegram_id = str(call.from_user.id)
    message_id = call.message.message_id
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω ad_id={ad_id}, telegram_id={telegram_id}, message_id={message_id}")
    async for session in get_db():
        logger.debug(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è ad_id={ad_id}")
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad}")
        if ad:
            ad.status = "approved"
            await session.commit()
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            subscriptions = await session.execute(select(Subscription))
            subscriptions = subscriptions.scalars().all()
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
            for sub in subscriptions:
                user_result = await session.execute(select(User).where(User.id == sub.user_id))
                user = user_result.scalar_one_or_none()
                logger.debug(f"–ü–æ–¥–ø–∏—Å–∫–∞ user_id={sub.user_id}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —é–∑–µ—Ä–∞: {user}")
                if not user:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ user_id={sub.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                if (
                    ad.city == sub.city and
                    ad.category == sub.category and
                    any(tag in ad.tags for tag in sub.tags)
                ):
                    logger.debug(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: city={sub.city}, category={sub.category}, tags={sub.tags}")
                    query = (
                        select(Advertisement)
                        .where(Advertisement.status == "approved")
                        .where(Advertisement.city == sub.city)
                        .where(Advertisement.category == sub.category)
                        .where(~Advertisement.id.in_(
                            select(ViewedAds.advertisement_id)
                            .where(ViewedAds.user_id == sub.user_id)
                        ))
                        .where(Advertisement.tags.overlap(sub.tags))
                    )
                    result = await session.execute(query)
                    pending_ads = result.scalars().all()
                    missed_count = len(pending_ads)
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {missed_count}, IDs: {[ad.id for ad in pending_ads]}")
                    if missed_count > 0:
                        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                            types.InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_subscription_ads")
                        ]])
                        text = f"–£ –≤–∞—Å {missed_count} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
                        try:
                            await call.message.bot.send_message(
                                chat_id=user.telegram_id,
                                text=text,
                                reply_markup=keyboard
                            )
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è telegram_id={user.telegram_id}, count={missed_count}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è telegram_id={user.telegram_id}: {e}")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–¥–æ–±—Ä—ë–Ω–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
            try:
                await call.message.bot.delete_message(chat_id=telegram_id, message_id=message_id)
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ad_id={ad_id} —É–¥–∞–ª–µ–Ω–æ, message_id={message_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è ad_id={ad_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ad_id={ad_id}")
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ–¥–æ–±—Ä–µ–Ω–æ"
            )

            # –ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω–µ—Ü —á–∞—Ç–∞
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            logger.debug(f"–ü–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è ad_id={ad_id}: {final_buttons}")
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )

    await call.answer()
    logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ approve_ad –¥–ª—è ad_id={ad_id}")


# –û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("reject:"), StateFilter(AdminForm.moderation))
async def reject_ad(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            ad.status = "rejected"
            await session.commit()
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            if user_telegram_id and user_telegram_id != telegram_id:
                await call.message.bot.send_message(
                    chat_id=user_telegram_id,
                    text=f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            result = await session.execute(
                select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
            )
            ads = result.scalars().all()
            for ad in ads:
                buttons = [
                    [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                     InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                     InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
                ]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("delete:"))
async def delete_ad(call: types.CallbackQuery):
    logger.debug(f"–í—ã–∑–≤–∞–Ω delete_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    ad_id = int(call.data.split(":", 1)[1])
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω ad_id={ad_id}, telegram_id={telegram_id}")
    async for session in get_db():
        logger.debug(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è ad_id={ad_id}")
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad}")
        if ad:
            await session.delete(ad)
            await session.commit()
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")

    logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ad_id={ad_id}")
    await call.message.bot.send_message(
        chat_id=telegram_id,
        text="–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ"
    )
    await call.answer()
    logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ delete_ad –¥–ª—è ad_id={ad_id}")


# –£–¥–∞–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("delete_confirm:"), StateFilter(AdminForm.confirm_delete))
async def delete_ad_confirmed(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            await session.delete(ad)
            await session.commit()
            if user_telegram_id and user_telegram_id != telegram_id:
                await call.message.bot.send_message(
                    chat_id=user_telegram_id,
                    text=f"üóë –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            result = await session.execute(
                select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
            )
            ads = result.scalars().all()
            for ad in ads:
                buttons = [
                    [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                     InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                     InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
                ]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )
    await state.set_state(AdminForm.moderation)
    await call.answer()