# handlers/admin_handler.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π Froggle
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F
from states import AdminForm, AdsViewForm
from database import get_db, User, Advertisement, select
from data.constants import get_main_menu_keyboard
from loguru import logger
from tools.utils import render_ad

admin_router = Router()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ú–æ–¥–µ—Ä–∞—Ü–∏—è" –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
@admin_router.callback_query(F.data == "admin_moderate", StateFilter(None, AdsViewForm.select_category))
async def admin_moderate(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user or not user.is_admin:
            await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        result = await session.execute(
            select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
        )
        ads = result.scalars().all()
        logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é: {len(ads)}, IDs: {[ad.id for ad in ads]}")
        if not ads:
            await call.message.edit_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        for ad in ads:
            buttons = [
                [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                 InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                 InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
            ]
            await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)

        final_buttons = [
            [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
             InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
        ]
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
        )

    await state.set_state(AdminForm.moderation)
    await call.answer()


# –û–¥–æ–±—Ä—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("approve:"), StateFilter(AdminForm.moderation))
async def approve_ad(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            ad.status = "approved"
            await session.commit()
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (—Ç–µ–±–µ) –≤ —Ç–≤–æ–π —á–∞—Ç —Å Froggle
            await call.message.bot.send_message(
                chat_id=8162326543,  # –¢–≤–æ–π —á–∞—Ç —Å Froggle
                text=f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            result = await session.execute(
                select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
            )
            ads = result.scalars().all()
            for ad in ads:
                buttons = [
                    [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                     InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                     InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
                ]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )
    await call.answer()


# –û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("reject:"), StateFilter(AdminForm.moderation))
async def reject_ad(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            ad.status = "rejected"
            await session.commit()
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            if user_telegram_id and user_telegram_id != telegram_id:
                await call.message.bot.send_message(
                    chat_id=user_telegram_id,
                    text=f"‚ùå –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            result = await session.execute(
                select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
            )
            ads = result.scalars().all()
            for ad in ads:
                buttons = [
                    [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                     InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                     InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
                ]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )
    await call.answer()


@admin_router.callback_query(F.data.startswith("delete:"), StateFilter(AdminForm.moderation))
async def delete_ad(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞", callback_data=f"delete_confirm:{ad_id}"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data="action:back")
    ]])
    await call.message.edit_text(
        f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}?",
        reply_markup=keyboard
    )
    await state.set_state(AdminForm.confirm_delete)
    await call.answer()


# –£–¥–∞–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("delete_confirm:"), StateFilter(AdminForm.confirm_delete))
async def delete_ad_confirmed(call: types.CallbackQuery, state: FSMContext):
    ad_id = int(call.data.split(":")[1])
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            await session.delete(ad)
            await session.commit()
            if user_telegram_id and user_telegram_id != telegram_id:
                await call.message.bot.send_message(
                    chat_id=user_telegram_id,
                    text=f"üóë –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            # –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
            result = await session.execute(
                select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
            )
            ads = result.scalars().all()
            for ad in ads:
                buttons = [
                    [InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}"),
                     InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}"),
                     InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}")]
                ]
                await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=True)
            # –ö–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏ "–ù–∞–∑–∞–¥" –≤ –∫–æ–Ω—Ü–µ
            final_buttons = [
                [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
            ]
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=final_buttons)
            )
    await state.set_state(AdminForm.moderation)
    await call.answer()