from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F
from aiogram.fsm.storage.base import StorageKey
from states import AdminForm, AdsViewForm
from database import get_db, User, Advertisement, select, ViewedAds, Subscription
from data.constants import get_main_menu_keyboard
from loguru import logger
from tools.utils import render_ad
from tools.utils import get_navigation_keyboard
from data.categories import CATEGORIES

admin_router = Router()

# –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data == "admin_moderate")
async def admin_moderate(call: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω admin_moderate —Å callback_data={call.data}, from_id={call.from_user.id}")
    telegram_id = str(call.from_user.id)
    async for session in get_db():
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user or not user.is_admin:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await call.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
        result = await session.execute(
            select(Advertisement).where(Advertisement.status == "pending").order_by(Advertisement.id)
        )
        ads = result.scalars().all()
        if not ads:
            logger.debug("–û–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –Ω–µ—Ç")
            await call.message.edit_text("–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\nüè†:", reply_markup=get_main_menu_keyboard())
            return

        # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞–∂–¥–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
        for ad in ads:
            buttons = [[
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}:[]"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}:[]"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}:[]")
            ]]
            message_ids = await render_ad(ad, call.message.bot, call.from_user.id, show_status=True, buttons=buttons, mark_viewed=False)
            logger.debug(f"–†–µ–Ω–¥–µ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è #{ad.id}, message_ids={message_ids}")
            # –û–±–Ω–æ–≤–ª—è–µ–º callback_data —Å message_ids
            updated_buttons = [[
                InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad.id}:[{','.join(map(str, message_ids))}]"),
                InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad.id}:[{','.join(map(str, message_ids))}]"),
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad.id}:[{','.join(map(str, message_ids))}]")
            ]]
            await call.message.bot.edit_message_reply_markup(
                chat_id=telegram_id,
                message_id=message_ids[-1],
                reply_markup=InlineKeyboardMarkup(inline_keyboard=updated_buttons)
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –µ—ë message_id
        nav_message = await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            reply_markup=get_navigation_keyboard()
        )
        await state.update_data(nav_message_id=nav_message.message_id)
        logger.debug(f"–ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, message_id={nav_message.message_id}")

    await state.set_state(AdminForm.moderation)
    await call.answer()


# handlers/admin_handler.py
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@admin_router.callback_query(F.data.startswith("approve:"))
async def approve_ad(call: types.CallbackQuery):
    logger.debug(f"–í—ã–∑–≤–∞–Ω approve_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    parts = call.data.split(":")
    ad_id = int(parts[1])
    message_ids = [int(mid) for mid in parts[2].strip("[]").split(",")] if len(parts) > 2 else []
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω ad_id={ad_id}, telegram_id={telegram_id}, message_ids={message_ids}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
    for msg_id in message_ids:
        try:
            await call.message.bot.delete_message(chat_id=telegram_id, message_id=msg_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è ad_id={ad_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –¥–ª—è ad_id={ad_id}: {e}")

    async for session in get_db():
        logger.debug(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è ad_id={ad_id}")
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            ad.status = "approved"
            await session.commit()
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –ø—Ä–∏–Ω—è—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            subscriptions = await session.execute(select(Subscription))
            subscriptions = subscriptions.scalars().all()
            logger.debug(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–ø–∏—Å–æ–∫: {len(subscriptions)}")
            for sub in subscriptions:
                user_result = await session.execute(select(User).where(User.id == sub.user_id))
                user = user_result.scalar_one_or_none()
                if not user:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ user_id={sub.user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    continue
                if (
                    ad.city == sub.city and
                    ad.category == sub.category and
                    any(tag in ad.tags for tag in sub.tags)
                ):
                    query = (
                        select(Advertisement)
                        .where(Advertisement.status == "approved")
                        .where(Advertisement.city == sub.city)
                        .where(Advertisement.category == sub.category)
                        .where(~Advertisement.id.in_(
                            select(ViewedAds.advertisement_id)
                            .where(ViewedAds.user_id == sub.user_id)
                        ))
                        .where(Advertisement.tags.overlap(sub.tags))
                    )
                    result = await session.execute(query)
                    pending_ads = result.scalars().all()
                    missed_count = len(pending_ads)
                    if missed_count > 0:
                        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_subscription_ads")
                        ]])
                        text = f"–£ –≤–∞—Å {missed_count} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
                        try:
                            await call.message.bot.send_message(
                                chat_id=user.telegram_id,
                                text=text,
                                reply_markup=keyboard
                            )
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è telegram_id={user.telegram_id}, count={missed_count}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è telegram_id={user.telegram_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text=f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ–¥–æ–±—Ä–µ–Ω–æ"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await call.message.bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=get_navigation_keyboard()
            )

    await call.answer()
    logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ approve_ad –¥–ª—è ad_id={ad_id}")


# –û—Ç–∫–ª–æ–Ω—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –£–±—Ä–∞–Ω –∏–º–ø–æ—Ä—Ç dp, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bot –∏–∑ call –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FSMContext
@admin_router.callback_query(F.data.startswith("reject:"))
async def reject_ad(call: types.CallbackQuery, state: FSMContext):
    logger.info(f"–í—Ö–æ–¥ –≤ reject_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    logger.debug(f"–í—ã–∑–≤–∞–Ω reject_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    parts = call.data.split(":")
    ad_id = int(parts[1])
    message_ids = [int(mid) for mid in parts[2].strip("[]").split(",")] if len(parts) > 2 else []
    telegram_id = str(call.from_user.id)
    bot = call.message.bot  # –ü–æ–ª—É—á–∞–µ–º bot –∏–∑ call
    logger.debug(f"–ò–∑–≤–ª–µ—á—ë–Ω ad_id={ad_id}, telegram_id={telegram_id}, message_ids={message_ids}")

    # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
    for msg_id in message_ids:
        try:
            await bot.delete_message(chat_id=telegram_id, message_id=msg_id)
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è ad_id={ad_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –¥–ª—è ad_id={ad_id}: {e}")

    async for session in get_db():
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        if ad:
            ad.status = "rejected"
            await session.commit()
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            if user_telegram_id and user_telegram_id != telegram_id:
                full_text = f"‚ùå: –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                short_text = full_text[:35] + "..." if len(full_text) > 35 else full_text
                msg = await bot.send_message(chat_id=user_telegram_id, text=short_text)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                notification_state = FSMContext(
                    storage=state.storage,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º storage –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ state
                    key=StorageKey(bot_id=bot.id, chat_id=int(user_telegram_id), user_id=int(user_telegram_id))
                )
                await notification_state.update_data(rejection_notification_id=msg.message_id)
                logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ö–æ–∑—è–∏–Ω—É telegram_id={user_telegram_id}, message_id={msg.message_id}")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∞
            data = await state.get_data()
            old_nav_message_id = data.get("nav_message_id")
            if old_nav_message_id:
                try:
                    await bot.delete_message(chat_id=telegram_id, message_id=old_nav_message_id)
                    logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, message_id={old_nav_message_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, message_id={old_nav_message_id}: {e}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            reject_message = await bot.send_message(
                chat_id=telegram_id,
                text=f"‚ùå –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ."
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}, message_id={reject_message.message_id}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            nav_message = await bot.send_message(
                chat_id=telegram_id,
                text="–†–µ–∂–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                reply_markup=get_navigation_keyboard()
            )
            await state.update_data(nav_message_id=nav_message.message_id)
            logger.debug(f"–ù–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, message_id={nav_message.message_id}")

    await call.answer()


# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("delete:"))
async def delete_ad(call: types.CallbackQuery):
    logger.debug(f"–í—ã–∑–≤–∞–Ω delete_ad —Å callback_data={call.data}, from_id={call.from_user.id}")
    parts = call.data.split(":")
    ad_id = int(parts[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    message_ids = parts[2].strip("[]").split(",") if len(parts) > 2 and parts[2] else []  # –ò–∑–≤–ª–µ–∫–∞–µ–º message_ids
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã ad_id={ad_id}, telegram_id={telegram_id}, message_ids={message_ids}")

    if not message_ids:
        logger.error(f"–ù–µ—Ç message_ids –¥–ª—è ad_id={ad_id}, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        )
        await call.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–∞", callback_data=f"delete_confirm:{ad_id}:[{','.join(message_ids)}]"),
        InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_delete:{ad_id}:[{','.join(message_ids)}]")
    ]])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    last_message_id = int(message_ids[-1])
    try:
        await call.message.bot.edit_message_text(
            chat_id=telegram_id,
            message_id=last_message_id,
            text=f"{call.message.text}\n\n–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ {last_message_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è ad_id={ad_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {last_message_id} –¥–ª—è ad_id={ad_id}: {e}")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )

    await call.answer()


# –£–¥–∞–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –∏ —á–∞—Ç–∞, –∑–∞–º–µ–Ω—è—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@admin_router.callback_query(F.data.startswith("delete_confirm:"))
async def delete_ad_confirmed(call: types.CallbackQuery, state: FSMContext):
    logger.debug(f"–í—ã–∑–≤–∞–Ω delete_ad_confirmed —Å callback_data={call.data}, from_id={call.from_user.id}")
    parts = call.data.split(":")
    ad_id = int(parts[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    message_ids = parts[2].strip("[]").split(",") if len(parts) > 2 and parts[2] else []  # –ò–∑–≤–ª–µ–∫–∞–µ–º message_ids
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã ad_id={ad_id}, telegram_id={telegram_id}, message_ids={message_ids}")

    if not message_ids:
        logger.error(f"–ù–µ—Ç message_ids –¥–ª—è ad_id={ad_id}, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ."
        )
        await call.answer()
        return

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
    last_message_id = int(message_ids[-1])
    for msg_id in message_ids[:-1]:
        try:
            await call.message.bot.delete_message(chat_id=telegram_id, message_id=int(msg_id))
            logger.debug(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –¥–ª—è ad_id={ad_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –¥–ª—è ad_id={ad_id}: {e}")

    async for session in get_db():
        logger.debug(f"–ù–∞—á–∞–ª–æ —Å–µ—Å—Å–∏–∏ –ë–î –¥–ª—è ad_id={ad_id}")
        result = await session.execute(select(Advertisement).where(Advertisement.id == ad_id))
        ad = result.scalar_one_or_none()
        logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {ad}")
        if ad:
            user_result = await session.execute(select(User.telegram_id).where(User.id == ad.user_id))
            user_telegram_id = user_result.scalar_one_or_none()
            await session.delete(ad)
            await session.commit()  # –¢–µ–ø–µ—Ä—å —Å CASCADE —É–¥–∞–ª–∏—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ viewed_ads –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º telegram_id={telegram_id}")
            if user_telegram_id and user_telegram_id != telegram_id:
                try:
                    await call.message.bot.send_message(
                        chat_id=user_telegram_id,
                        text=f"üóë –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                    )
                    logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ—Ä—É telegram_id={user_telegram_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—É telegram_id={user_telegram_id}: {e}")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try:
        await call.message.bot.edit_message_text(
            chat_id=telegram_id,
            message_id=last_message_id,
            text=f"üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=None,
            parse_mode="HTML"
        )
        logger.debug(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ message_id={last_message_id} –¥–ª—è ad_id={ad_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {last_message_id} –¥–ª—è ad_id={ad_id}: {e}")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text=f"üóë –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —É–¥–∞–ª–µ–Ω–æ (–æ—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)."
        )

    await state.set_state(AdminForm.moderation)
    await call.answer()


# –û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@admin_router.callback_query(F.data.startswith("cancel_delete:"))
async def cancel_delete(call: types.CallbackQuery):
    logger.debug(f"–í—ã–∑–≤–∞–Ω cancel_delete —Å callback_data={call.data}, from_id={call.from_user.id}")
    parts = call.data.split(":")
    ad_id = int(parts[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    message_ids = parts[2].strip("[]").split(",") if len(parts) > 2 and parts[2] else []  # –ò–∑–≤–ª–µ–∫–∞–µ–º message_ids
    telegram_id = str(call.from_user.id)
    logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã ad_id={ad_id}, telegram_id={telegram_id}, message_ids={message_ids}")

    if not message_ids:
        logger.error(f"–ù–µ—Ç message_ids –¥–ª—è ad_id={ad_id}, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏."
        )
        await call.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve:{ad_id}:[{','.join(message_ids)}]"),
        InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{ad_id}:[{','.join(message_ids)}]"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete:{ad_id}:[{','.join(message_ids)}]")
    ]])

    # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    current_text = call.message.text
    confirmation_line = f"\n\n–£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id}?"
    if confirmation_line in current_text:
        original_text = current_text.replace(confirmation_line, "")
    else:
        original_text = current_text  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_message_id = int(message_ids[-1])
    try:
        await call.message.bot.edit_message_text(
            chat_id=telegram_id,
            message_id=last_message_id,
            text=original_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.debug(f"–ö–Ω–æ–ø–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ad_id={ad_id}, message_id={last_message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è ad_id={ad_id}, message_id={last_message_id}: {e}")
        await call.message.bot.send_message(
            chat_id=telegram_id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫."
        )

    await call.answer()