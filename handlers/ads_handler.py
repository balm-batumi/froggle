from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram import F
from sqlalchemy import select, func
from loguru import logger
from database import get_db, Advertisement, get_cities, get_category_tags, is_favorite, User, add_to_favorites
from data.constants import get_main_menu_keyboard
from data.categories import CATEGORIES
from states import AdsViewForm, AdAddForm

ads_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@ads_router.callback_query(F.data.startswith("category:"))
async def show_cities_by_category(call: types.CallbackQuery, state: FSMContext):
    category = call.data.split(":")[1]
    telegram_id = str(call.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

    async for session in get_db():
        city_counts = await session.execute(
            select(Advertisement.city, func.count(Advertisement.id).label("count"))
            .where(Advertisement.category == category, Advertisement.status == "approved")
            .group_by(Advertisement.city)
            .order_by(func.count(Advertisement.id).desc())
        )
        cities = city_counts.all()

        buttons = [
            InlineKeyboardButton(text=f"{city} ({count})", callback_data=f"city_select:{category}:{city}")
            for city, count in cities if city
        ]
        keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
        keyboard_rows.append([
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë", callback_data="action:add"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")
        ])
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)

        await state.update_data(category=category)
        display_name = CATEGORIES[category]["display_name"]
        text = (f"–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_name}':"
                if cities else f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_name}' –ø–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:")
        await call.message.edit_text(text, reply_markup=keyboard)
        await state.set_state(AdsViewForm.select_city)
        await call.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@ads_router.callback_query(F.data.startswith("city_select:"), StateFilter(AdsViewForm.select_city))
async def show_ads_by_city(call: types.CallbackQuery, state: FSMContext):
    _, category, city = call.data.split(":", 2)
    telegram_id = str(call.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ '{city}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")

    async for session in get_db():
        ads = await session.execute(
            select(Advertisement)
            .where(Advertisement.category == category, Advertisement.city == city, Advertisement.status == "approved")
            .order_by(Advertisement.id)
        )
        ads = ads.scalars().all()

        if not ads:
            logger.debug(f"–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            display_name = CATEGORIES[category]["display_name"]
            await call.message.edit_text(
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{display_name}' –≤ –≥–æ—Ä–æ–¥–µ '{city}' –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.\n:",
                reply_markup=get_main_menu_keyboard()
            )
            await state.clear()
            await call.answer()
            return

        logger.debug(f"–ù–∞—á–∞–ª–æ –≤—ã–≤–æ–¥–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(ads)}")
        await call.message.delete()
        header_msg = await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–û–±—ä—è–≤–ª–µ–Ω–∏—è\n" + "‚Äï" * 27
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–≥–æ–ª–æ–≤–æ–∫, message_id: {header_msg.message_id}")

        for index, ad in enumerate(ads):
            display_name = CATEGORIES[ad.category]["display_name"]
            text = (
                f"<b>{display_name} –≤ {ad.city}</b>\n"
                f"üìå {', '.join(ad.tags) if ad.tags else '–ù–µ—Ç —Ç–µ–≥–æ–≤'}\n"
                f"{ad.title_ru}\n"
                f"{ad.description_ru[:1000] + '...' if len(ad.description_ru) > 1000 else ad.description_ru}\n"
                f"–∫–æ–Ω—Ç–∞–∫—Ç—ã: {ad.contact_info if ad.contact_info else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}"
            )
            logger.debug(f"–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID {ad.id}: {repr(text)}")
            user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
            user = user_result.scalar_one_or_none()
            is_fav = await is_favorite(user.id, ad.id) if user else False
            logger.debug(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ ID {ad.id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {is_fav}")

            favorite_button = InlineKeyboardButton(
                text="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" if not is_fav else "–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º",
                callback_data=f"favorite:add:{ad.id}" if not is_fav else "favorite:already"
            )
            ad_keyboard = InlineKeyboardMarkup(inline_keyboard=[[favorite_button]])
            logger.debug(f"–°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è ID {ad.id}: {ad_keyboard.inline_keyboard}")

            await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text=f"‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢     –û–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad.id}:     ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
            )

            if ad.media_file_ids and len(ad.media_file_ids) > 0:
                photo_group = []
                video_group = []
                for file_id in ad.media_file_ids[:10]:
                    try:
                        file_info = await call.message.bot.get_file(file_id)
                        file_path = file_info.file_path.lower()
                        if file_path.endswith(('.jpg', '.jpeg', '.png', '.gif')):
                            photo_group.append(types.InputMediaPhoto(media=file_id))
                        elif file_path.endswith(('.mp4', '.mov', '.avi')):
                            video_group.append(types.InputMediaVideo(media=file_id))
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è file_id {file_id}: {file_path}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ file_id {file_id} –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è ID {ad.id}: {e}")

                if photo_group:
                    if len(photo_group) == 1:
                        await call.message.bot.send_photo(
                            chat_id=call.from_user.id,
                            photo=photo_group[0].media
                        )
                    else:
                        await call.message.bot.send_media_group(chat_id=call.from_user.id, media=photo_group)
                if video_group:
                    if len(video_group) == 1:
                        await call.message.bot.send_video(
                            chat_id=call.from_user.id,
                            video=video_group[0].media
                        )
                    else:
                        await call.message.bot.send_media_group(chat_id=call.from_user.id, media=video_group)

            msg = await call.message.bot.send_message(
                chat_id=call.from_user.id,
                text=text,
                reply_markup=ad_keyboard
            )
            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è ID {ad.id}, message_id: {msg.message_id}")

        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="action:help"),
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—ë", callback_data="action:add"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")
        ]])
        final_msg = await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é, message_id: {final_msg.message_id}")
    await call.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
@ads_router.callback_query(F.data.startswith("favorite:"), StateFilter(AdsViewForm.select_city))
async def handle_favorite_action(call: types.CallbackQuery, state: FSMContext):
    telegram_id = str(call.from_user.id)
    parts = call.data.split(":")
    action = parts[1]

    async for session in get_db():
        user_result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = user_result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.", show_alert=True)
            return

        if action == "add":
            ad_id = int(parts[2])
            if await is_favorite(user.id, ad_id):
                await call.answer("–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", show_alert=True)
            else:
                await add_to_favorites(user.id, ad_id)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–∏–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
                await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
        elif action == "already":
            await call.answer("–≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤ –≤–∞—à–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–º!", show_alert=True)

# –ü–æ–º–æ—â—å
@ads_router.callback_query(F.data == "action:help", StateFilter(AdsViewForm.select_city))
async def show_help(call: types.CallbackQuery, state: FSMContext):
    await call.message.bot.send_message(
        chat_id=call.from_user.id,
        text="Froggle ‚Äî –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.\n:", reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await call.answer()

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@ads_router.callback_query(F.data == "action:add", StateFilter(AdsViewForm.select_city))
async def start_adding_ad(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    telegram_id = str(call.from_user.id)
    logger.info(f"–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category} –¥–ª—è telegram_id={telegram_id}")

    await state.set_state(AdAddForm.city)
    await state.update_data(category=category)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–±–∏–ª–∏—Å–∏", callback_data=f"add_city:{category}:–¢–±–∏–ª–∏—Å–∏"),
         InlineKeyboardButton(text="–ë–∞—Ç—É–º–∏", callback_data=f"add_city:{category}:–ë–∞—Ç—É–º–∏")],
        [InlineKeyboardButton(text="–ö—É—Ç–∞–∏—Å–∏", callback_data=f"add_city:{category}:–ö—É—Ç–∞–∏—Å–∏"),
         InlineKeyboardButton(text="–ì–æ—Ä–∏", callback_data=f"add_city:{category}:–ì–æ—Ä–∏")],
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data=f"add_city_other:{category}"),
         InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data=f"help:{category}:city"),
         InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="action:back")]
    ])
    await call.message.bot.send_message(
        chat_id=call.from_user.id,
        text=CATEGORIES[category]["texts"]["city"],
        reply_markup=keyboard
    )
    await call.answer()

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@ads_router.callback_query(F.data.startswith("action:back"), StateFilter(AdsViewForm.select_city))
async def back_to_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.bot.send_message(
        chat_id=call.from_user.id,
        text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é :",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
    await call.answer()


# –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
@ads_router.callback_query(F.data.startswith("add_city:"), StateFilter(AdAddForm.city))
async def process_add_city(call: types.CallbackQuery, state: FSMContext):
    _, category, city = call.data.split(":", 2)
    telegram_id = str(call.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª –≥–æ—Ä–æ–¥ '{city}' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")

    await state.update_data(city=city)
    tags = await get_category_tags(CATEGORIES[category]["tag_category"])
    if not tags:
        await call.message.bot.send_message(
            chat_id=call.from_user.id,
            text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–≥–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n:", reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        await call.answer()
        return

    buttons = [tags[i:i + 3] for i in range(0, len(tags), 3)]  # –°–µ—Ç–∫–∞ –ø–æ 3
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=name, callback_data=f"tag_select:{id}") for id, name in row] for row in buttons
    ])
    await call.message.edit_text(
        CATEGORIES[category]["texts"]["tags"],
        reply_markup=keyboard
    )
    await state.set_state(AdAddForm.tags)
    await call.answer()


# –í—ã–±–æ—Ä –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@ads_router.callback_query(F.data.startswith("add_city_other:"), StateFilter(AdAddForm.city))
async def process_add_city_other(call: types.CallbackQuery, state: FSMContext):
    category = call.data.split(":", 1)[1]
    telegram_id = str(call.from_user.id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –≤—ã–±—Ä–∞–ª '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")

    cities = await get_cities()
    main_cities = ["–¢–±–∏–ª–∏—Å–∏", "–ë–∞—Ç—É–º–∏", "–ö—É—Ç–∞–∏—Å–∏", "–ì–æ—Ä–∏"]
    other_cities = [city[1] for city in cities if city[1] not in main_cities]
    buttons = [
        InlineKeyboardButton(text=city, callback_data=f"add_city:{category}:{city}")
        for city in other_cities
    ]
    keyboard_rows = [buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await call.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥:",
        reply_markup=keyboard
    )
    await call.answer()