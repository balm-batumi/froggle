# main.py
# –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ Froggle
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from loguru import logger
from config import BOT_TOKEN
from database import init_db, get_db, Subscription, Advertisement, ViewedAds, User, select
from handlers.ads_handler import ads_router
from handlers.menu_handler import menu_router
from handlers.ad_handler import ad_router
from handlers.admin_handler import admin_router
from states import AdsViewForm
from data.constants import get_main_menu_keyboard
from aiogram.fsm.context import FSMContext

logger.add("logs/froggle.log", rotation="10MB", compression="zip", level="DEBUG")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher(storage=MemoryStorage())

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤
async def log_callback_middleware(handler, event: types.CallbackQuery, data: dict):
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback: data={event.data}, from_id={event.from_user.id}, current_state={await data['state'].get_state()}")
    return await handler(event, data)

dp.callback_query.outer_middleware(log_callback_middleware)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    telegram_id = str(message.from_user.id)
    menu_message = await message.answer(
        "üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ù–µ—Ç",
        reply_markup=get_main_menu_keyboard()
    )
    await state.update_data(initial_message_id=menu_message.message_id)
    await state.set_state(AdsViewForm.select_category)
    logger.info(f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è telegram_id={telegram_id}, message_id={menu_message.message_id}")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞)
# async def notify_subscribers():
#     while True:
#         logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
#         async for session in get_db():
#             subscriptions = await session.execute(select(Subscription))
#             subscriptions = subscriptions.scalars().all()
#             for sub in subscriptions:
#                 user_result = await session.execute(select(User.is_admin).where(User.id == sub.user_id))
#                 is_admin = user_result.scalar_one_or_none() or False
#                 query = (
#                     select(Advertisement)
#                     .where(
#                         Advertisement.status == "approved",
#                         Advertisement.city == sub.city,
#                         Advertisement.category == sub.category,
#                         Advertisement.tags.any(sub.tags[0])
#                     )
#                 )
#                 if not is_admin:
#                     query = query.where(~Advertisement.id.in_(
#                         select(ViewedAds.advertisement_id)
#                         .join(User)
#                         .where(User.id == sub.user_id)
#                     ))
#                 result = await session.execute(query)
#                 pending_ads = result.scalars().all()
#                 missed_count = len(pending_ads)
#                 logger.debug(f"–î–ª—è user_id={sub.user_id}: –Ω–∞–π–¥–µ–Ω–æ {missed_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –ø–æ–¥–ø–∏—Å–∫–∞: city={sub.city}, category={sub.category}, tags={sub.tags}")
#                 if missed_count > 0:
#                     keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
#                         types.InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å", callback_data="view_subscription_ads")
#                     ]])
#                     text = f"–£ –≤–∞—Å {missed_count} –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ"
#                     try:
#                         await bot.send_message(
#                             chat_id=sub.user_id,
#                             text=text,
#                             reply_markup=keyboard
#                         )
#                         logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è user_id={sub.user_id}, count={missed_count}")
#                     except Exception as e:
#                         logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è user_id={sub.user_id}: {e}")
#         await asyncio.sleep(600)

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Froggle...")
    await init_db()
    dp.include_router(ads_router)
    logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω ads_router")
    dp.include_router(menu_router)
    logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω menu_router")
    dp.include_router(ad_router)
    logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω ad_router")
    dp.include_router(admin_router)
    logger.debug("–ü–æ–¥–∫–ª—é—á–µ–Ω admin_router")
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling...")
    # asyncio.create_task(notify_subscribers())  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())