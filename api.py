# api.py
# API-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Froggle, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ—Ç AdSenderBot
import asyncio
import random
import os
from fastapi import FastAPI, UploadFile, Form, HTTPException
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.types import FSInputFile  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
from aiogram.exceptions import TelegramAPIError  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Telegram
from sqlalchemy.ext.asyncio import AsyncSession
from loguru import logger
from config import BOT_TOKEN, DATABASE_URL  # –ò–º–ø–æ—Ä—Ç —Ç–æ–∫–µ–Ω–∞ –∏ URL –±–∞–∑—ã –∏–∑ config.py
from database import Advertisement, User, get_db, get_all_category_tags
from sqlalchemy import select
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.storage.base import StorageKey  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å FSMContext
from data.constants import get_main_menu_keyboard  # –î–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("logs/api.log", rotation="10MB", compression="zip", level="DEBUG")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –∏ –±–æ—Ç–∞ Froggle
app = FastAPI()
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å FSMContext –≤ API

# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
CHAT_ID_HOUSING = -1002575896997
ADMIN_CHAT_ID = 8162326543

@app.post("/api/notify_admins")
async def notify_admins(
    category: str = Form(...),
    city: str = Form(...),
    tags: str = Form(...),
    title_ru: str = Form(...),
    description_ru: str = Form(...),
    price: str = Form(default=""),
    contact_info: str = Form(...),
    status: str = Form(...),
    is_test: bool = Form(...),
    user_id: str = Form(...),
    api_key: str = Form(...),
    media: UploadFile = Form(...)
):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/notify_admins —Å api_key={api_key}, tags={tags}")

    if api_key != "secret_key":
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π api_key: {api_key}")
        raise HTTPException(status_code=403, detail="Invalid API key")

    async for session in get_db():
        result = await session.execute(select(User.id).where(User.telegram_id == user_id))
        db_user_id = result.scalar_one_or_none()
        if not db_user_id:
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise HTTPException(status_code=400, detail="User not found")

        # –ü–∞—Ä—Å–∏–º —Ç–µ–≥–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤
        try:
            tags_list = json.loads(tags) if isinstance(tags, str) and tags.startswith("[") else [tags]
            logger.debug(f"–°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏: {tags_list}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–≥–æ–≤: {e}, tags={tags}")
            tags_list = [tags]  # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –æ–¥–∏–Ω —Ç–µ–≥

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–≥–∏
        valid_tags = [tag[1] for tag in await get_all_category_tags(category)]
        if not valid_tags:
            logger.error(f"–ù–µ—Ç —Ç–µ–≥–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'")
            raise HTTPException(status_code=400, detail=f"No tags for category '{category}'")
        tags_list = [tag for tag in tags_list if tag in valid_tags]
        if not tags_list:
            tags_list = [random.choice(valid_tags)]  # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ, —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–≥
        logger.debug(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: {tags_list}")

        try:
            file_content = await media.read()
            temp_file_path = f"temp_{media.filename}"
            with open(temp_file_path, "wb") as temp_file:
                temp_file.write(file_content)

            photo = FSInputFile(temp_file_path)
            sent_photo = await bot.send_photo(chat_id=CHAT_ID_HOUSING, photo=photo)
            media_file_id = sent_photo.photo[-1].file_id

            os.remove(temp_file_path)

            ad = Advertisement(
                user_id=db_user_id,
                category=category,
                city=city,
                tags=tags_list,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤
                title_ru=title_ru,
                description_ru=description_ru,
                price=price if price else None,
                media_file_ids=[{"id": media_file_id, "type": "photo"}],
                contact_info=contact_info,
                status=status,
                is_test=is_test
            )
            session.add(ad)
            await session.commit()
            await session.refresh(ad)
            ad_id = ad.id
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} —Å —Ç–µ–≥–∞–º–∏: {ad.tags}")

            state = FSMContext(
                storage=storage,
                key=StorageKey(bot_id=bot.id, chat_id=ADMIN_CHAT_ID, user_id=ADMIN_CHAT_ID)
            )
            data = await state.get_data()
            initial_message_id = data.get("initial_message_id")
            full_text = f"üè†–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ #{ad_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
            if initial_message_id:
                try:
                    await bot.edit_message_text(
                        chat_id=ADMIN_CHAT_ID,
                        message_id=initial_message_id,
                        text=full_text,
                        reply_markup=get_main_menu_keyboard()
                    )
                except TelegramAPIError as e:
                    menu_message = await bot.send_message(
                        chat_id=ADMIN_CHAT_ID,
                        text=full_text,
                        reply_markup=get_main_menu_keyboard()
                    )
                    await state.update_data(initial_message_id=menu_message.message_id)
            else:
                menu_message = await bot.send_message(
                    chat_id=ADMIN_CHAT_ID,
                    text=full_text,
                    reply_markup=get_main_menu_keyboard()
                )
                await state.update_data(initial_message_id=menu_message.message_id)

            return {"ad_id": ad_id}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise HTTPException(status_code=500, detail=str(e))

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ API Froggle...")
    # FastAPI –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ uvicorn –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ

if __name__ == "__main__":
    asyncio.run(main())